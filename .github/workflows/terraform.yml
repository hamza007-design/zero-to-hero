name: "Terraform CI/CD Pipeline"

on:
  push:
    branches:
      - dev # Jab 'dev' branch par code push ho ga
  workflow_dispatch: # Ye manual trigger ke liye hai
    inputs:
      action:
        description: 'Terraform Action (apply/destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy

env:
  TF_DIR: ./Terraform # Terraform files ka directory
  TF_VERSION: 1.5.7 # Terraform ka version

jobs:

  validate_plan:
    # Ye job sirf 'push' event par chalegi.
    # Manual workflow_dispatch par ye skip ho jayegi, jo ke expected hai.
    if: github.event_name == 'push'
    name: "Validate & Plan"
    runs-on: ubuntu-latest
    environment: production # Aap ka environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Plan
        run: terraform plan -var-file="default.tfvars"
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}

  apply:
    # Ye job tab chalegi jab workflow_dispatch event ho aur 'action' input 'apply' ho.
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' }}
    name: "Apply Infrastructure"
    runs-on: ubuntu-latest
    environment: production # Aap ka environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="default.tfvars"
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}

  destroy:
    # Ye job tab chalegi jab workflow_dispatch event ho aur 'action' input 'destroy' ho.
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy' }}
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    environment: production # Aap ka environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file="default.tfvars"
        working-directory: ${{ env.TF_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}
